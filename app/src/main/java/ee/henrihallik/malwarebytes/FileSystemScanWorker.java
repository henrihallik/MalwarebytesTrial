package ee.henrihallik.malwarebytes;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.os.Build;
import android.os.Environment;
import android.util.Log;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.core.app.NotificationCompat;
import androidx.work.ForegroundInfo;
import androidx.work.ListenableWorker;
import androidx.work.WorkManager;
import androidx.work.Worker;
import androidx.work.WorkerParameters;

import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.file.Files;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.LinkedList;

import static android.content.Context.NOTIFICATION_SERVICE;

public class FileSystemScanWorker extends Worker {
    private NotificationManager notificationManager;

    public static final String TASK_DESC = "task_desc";
    public static final String TASK_FULL_SCAN_COMPLETE = "task_desc_full_scan_complete";

    public FileSystemScanWorker(
            @NonNull Context context,
            @NonNull WorkerParameters parameters) {
        super(context, parameters);
        notificationManager = (NotificationManager)
                context.getSystemService(NOTIFICATION_SERVICE);
    }

    @NonNull
    @Override
    public ListenableWorker.Result doWork() {
        String progress = "Starting Scan";
        setForegroundAsync(createForegroundInfo(progress));

        App.files = new ArrayList<>();
        //App.files.addAll(scanRootDir(Environment.getRootDirectory()));
        App.files.addAll(scanRootDir(Environment.getExternalStorageDirectory()));

        //App.files.addAll(scanRootDir(Environment.getDownloadCacheDirectory()));
        //App.files.addAll(scanRootDir(Environment.getDataDirectory()));

        try {
            OutputStreamWriter outputStreamWriter = new OutputStreamWriter(this.getApplicationContext().openFileOutput("tempresults.txt", Context.MODE_PRIVATE));
            outputStreamWriter.write("aaa");
            outputStreamWriter.write("bbb");
            outputStreamWriter.close();
        }
        catch (IOException e) {
            Log.e("Exception", "File write failed: " + e.toString());
        }

        return Result.success();
    }

    private ArrayList<File> scanRootDir(File rootDir){
        LinkedList<File> dirQueue = new LinkedList<>();
        ArrayList<File> fileNames = new ArrayList<>();

        dirQueue.add(rootDir);
        while(dirQueue.size()!=0){
            File[] subDirs = dirQueue.poll().listFiles();
            if(subDirs!=null) {
                for (File file : subDirs) {
                    if(file.isFile()){
                        BasicFileAttributes attr = null;
                        try {
                            attr = Files.readAttributes(file.toPath(), BasicFileAttributes.class);
                            long createdAt = attr.creationTime().toMillis();
                            file.setLastModified(createdAt);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }

                        fileNames.add(file);
                    } else {
                        dirQueue.add(file);
                    }
                }
            }
        }
        return fileNames;
    }

    @NonNull
    private ForegroundInfo createForegroundInfo(@NonNull String progress) {
        Context context = getApplicationContext();
        String id = "id";
        String title = "title";
        String cancel = "cancel";
        // This PendingIntent can be used to cancel the worker
        PendingIntent intent = WorkManager.getInstance(context)
                .createCancelPendingIntent(getId());

        createChannel();

        Notification notification = new NotificationCompat.Builder(context, id)
                .setContentTitle(title)
                .setSmallIcon(R.drawable.ic_launcher_foreground)
                .setTicker(title)
                .setOngoing(true)
                .addAction(android.R.drawable.ic_delete, cancel, intent)
                .build();

        return new ForegroundInfo(0, notification);
    }

    @RequiresApi(Build.VERSION_CODES.O)
    private void createChannel() {
        // Create a Notification channel
    }
}