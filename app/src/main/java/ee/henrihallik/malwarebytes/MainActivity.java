package ee.henrihallik.malwarebytes;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.work.Data;
import androidx.work.OneTimeWorkRequest;
import androidx.work.WorkInfo;
import androidx.work.WorkManager;

import java.util.ArrayList;
import java.util.Collections;

import static ee.henrihallik.malwarebytes.FileSystemScanWorker.TASK_FULL_SCAN_COMPLETE;

public class MainActivity extends AppCompatActivity {
    private static final String TAG = MainActivity.class.getName();
    private Button mScanButton;
   // private FileViewModel mFileViewModel;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
       // mFileViewModel = new ViewModelProvider(this,
         //       ViewModelProvider.AndroidViewModelFactory.getInstance(getApplication())).get(FileViewModel.class);
        mScanButton = findViewById(R.id.scanButton);
        mScanButton.setOnClickListener(
                view -> scanFileSystem());

        RecyclerView recyclerView = findViewById(R.id.recyclerview);
        final WordListAdapter adapter = new WordListAdapter(this);
        recyclerView.setAdapter(adapter);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
    }
    private ArrayList<String> fileNames = new ArrayList<>();
    public void scanFileSystem(){
        Data data = new Data.Builder()
                .putString(FileSystemScanWorker.TASK_DESC, "The task data passed from MainActivity")
                .build();

        final OneTimeWorkRequest workRequest = new OneTimeWorkRequest.Builder(FileSystemScanWorker.class).setInputData(data).build();

        WorkManager.getInstance(getApplication()).getWorkInfoByIdLiveData(workRequest.getId())
                .observe(this, workInfo -> {
                    if( workInfo.getState().name().equals(WorkInfo.State.SUCCEEDED)) {
                        Log.d(TAG, "Workstate=" + workInfo.getState().name() + "\n");
                    }
                });

        WorkManager.getInstance(getApplication()).enqueue(workRequest);
    }

    @Override
    protected void onResume(){
        super.onResume();
        boolean hasPermission =( ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE)
                == PackageManager.PERMISSION_GRANTED);
        if (!hasPermission){
            ActivityCompat.requestPermissions( this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 1);
        }else {

        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == 1) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {

            } else {

            }
        }
    }


}